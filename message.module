<?php

/**
 * @file
 * API functions to manipulate messages.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\message\Entity\Message;
use Drupal\message\Entity\MessageType;

/**
 * The maximal amount of messages to be purged upon hook_cron()
 */
define('MESSAGE_PURGE_LIMIT', 100);

/**
 * Drupal 8 part. Remove this comment after finishing the porting process.
 */

/**
 * Implements hook_entity_delete().
 *
 * Handles messages deletion when referenced entities are being deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object for the entity that has been deleted.
 */
function message_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $type = $entity->getEntityType()->id();
  if ($type == 'message') {
    // Why not message?
    return;
  }

  $types = \Drupal::config('message.settings')->get('delete_on_entity_delete');

  if (!$types || !in_array($type, $types)) {
    return;
  }

  // List of messages to delete.
  $deletable_mids = array();
  // List of messages that might be deleted;
  // Messages with references to fields with multiple cardinality will be stored
  // in $check_mids in order to check if the entity being deleted is the last
  // one referenced by a given field.
  // Keyed by message ID, pointing to array of the relevant field names.
  $check_mids = array();

  $fields_ids = \Drupal::entityQuery('field_storage_config')->execute();
  /** @var FieldStorageConfig[] $fields */
  $fields = entity_load_multiple('field_storage_config', array_keys($fields_ids));

  // Search for fields in which messages referenced the deleted entity.
  foreach ($fields as $field) {
    if ($field->get('entity_type') != 'message') {
      // This field isn't used in any message.
      continue;
    }

    // Only delete messages due to referenced entity or referenced taxonomy term
    // deletion.
    if ($field->getType() != 'entity_reference') {
      continue;
    }

    $query = \Drupal::entityQuery('message');
    $results = $query
      ->condition($field->getName(), $entity->id())
      ->execute();

    if (empty($results)) {
      continue;
    }

    if ($field->getCardinality() == 1) {
      $deletable_mids += array_keys($results);
    }
    else {
      $messages = Message::loadMultiple($results);

      foreach ($messages as $message) {
        $check_mids[$message->id()][] = $field->getName();
      }
    }
  }

  // Check messages with multiple cardinality references; Only delete such
  // messages if the entity being deleted is the last one referenced by the
  // message.
  if ($check_mids) {
    $messages = Message::loadMultiple(array_keys($check_mids));
    foreach ($messages as $message) {
      foreach ($check_mids[$message->id()] as $field_name) {

        // We need to check if the field is references is empty.
        if (count($message->get($field_name)->referencedEntities()) === 0) {
          $deletable_mids[] = $message->id();
        }
      }
    }
  }

  if ($deletable_mids) {
    // Delete messages.
    $messages = Message::loadMultiple($deletable_mids);
    Message::deleteMultiple($messages);
  }
}

/**
 * Implements hook_cron().
 *
 * Fetch all message types and purge old messages.
 */
function message_cron() {
  $config = \Drupal::config('message.settings');

  // The maximal amount of messages to purge per cron run.
  $purge_limit = $config->get('delete_cron_limit');

  // Messages to be deleted.
  $purge_messages = array();
  // Names of non global-purge-settings overriding message types.
  $no_override_type_names = array();
  // Message types that override global purge settings.
  $override_types = array();

  // Iterate all message types to distinguish between overriding and non-
  // overriding types.
  /** @var MessageType[] $message_types */
  $message_types = MessageType::loadMultiple();
  foreach ($message_types as $message_type) {
    $data = $message_type->getData();
    if (empty($data['purge']['override'])) {
      $no_override_type_names[] = $message_type->id();
    }
    else {
      // For overriding types, store the type and not its name to later extract
      // the specific purge settings.
      $override_types[] = $message_type;
    }
  }

  // Gather purgeable messages of overriding types.
  /** @var MessageType[] $override_types */
  foreach ($override_types as $message_type) {
    // Ignore message type with unchecked "Purge messages". Also make sure that
    // purging settings are present.
    $data = $message_type->getData();
    if (empty($data['purge']) || empty($data['purge']['enabled'])) {
      continue;
    }

    $purge_messages += message_get_purgeable_by_type($purge_limit, $message_type->id(), $data['purge']);
  }

  // Gather purgeable messages of non-overriding types according to global
  // settings.
  if (!empty($no_override_type_names)) {
    // Do nothing if purge isn't enabled.
    if ($config->get('purge_enable', FALSE)) {
      $purge_settings = array(
        'quota' => $config->get('purge_quota'),
        'days' => $config->get('purge_days'),
      );

      $purge_messages += message_get_purgeable_by_type($purge_limit, $no_override_type_names, $purge_settings);
    }
  }

  // Delete all gathered messages.
  if (!empty($purge_messages)) {
    \Drupal::entityManager()->getStorage('message')->delete($purge_messages);
  }
}

/**
 * Find purgeable messages according to type and purge settings.
 *
 * @param $purge_limit
 *   The maximal amount of messages to fetch. Decremented each time messages
 *   are fetched.
 * @param $message_type_name
 *   Either a single message type name or an array of names.
 * @param $purge_settings
 *   Array containing purging settings: 'quota' and 'days'.
 *
 * @return Message[]
 *   Messages of the given type(s) that should be purged according to the given
 *   settings.
 */
function message_get_purgeable_by_type(&$purge_limit, $message_type_name, $purge_settings) {
  if ($purge_limit <= 0) {
    return array();
  }

  // Messages to be deleted.
  $purge_messages = array();

  // Base query for both purging methods.
  $query = \Drupal::entityQuery('message')
    ->condition('type', $message_type_name, is_array($message_type_name) ? 'IN' : '=')
    ->sort('created', 'DESC')
    ->sort('mid', 'DESC');

  // Purge according to quota definition.
  if (!empty($purge_settings['quota'])) {
    $quota_query = clone $query;
    $result = $quota_query
      ->range($purge_settings['quota'], $purge_limit)
      ->execute();

    if (!empty($result)) {
      $purge_limit -= count($result);
      $purge_messages += $result;
    }
  }

  // Purge according to maximal age definition.
  if (!empty($purge_settings['days'])) {
    $age_query = clone $query;
    // Find messages older than current time - maximal age in days times
    // the seconds per day.
    $earlier_than = time() - $purge_settings['days'] * 86400;
    $result = $age_query->condition('created', $earlier_than, '<')
      ->range(0, $purge_limit)
      ->execute();

    if (!empty($result)) {
      $purge_limit -= count($result);
      $purge_messages += $result;
    }
  }

  return Message::loadMultiple($purge_messages);
}

/**
 * usort callback; Order the form elements by their weight.
 */
function message_order_text_weight($a, $b) {
  if ($a['_weight'] == $b['_weight']) {
    return 0;
  }

  return ($a['_weight'] < $b['_weight']) ? -1 : 1;
}

/**
 * Implement hook_entity_extra_field_info().
 */
function message_entity_extra_field_info() {
  $extra = array();

  /** @var MessageType[] $bundles */
  $bundles = MessageType::loadMultiple();
  foreach ($bundles as $bundle) {

    foreach (array_keys($bundle->getText(NULL, array('text' => TRUE))) as $delta) {

      if (!is_int($delta)) {
        // The get text holds also the translated text. Since we hold only need
        // the number of partials we don't need to include delta of texts.
        continue;
      }

      $params = array('%number' => $delta);
      $extra['message'][$bundle->id()]['display']['partial_' . $delta] = array(
        'label' => t('Partial %number', $params),
        'description' => t('Holds the partial text at position %number', $params),
        'weight' => 0,
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_config_translation_info_alter().
 */
function message_config_translation_info_alter(&$info) {
  $info['message_type']['class'] = '\Drupal\message\MessageConfigEntityMapper';
}

/**
 * Implements hook_theme().
 */
function message_theme() {
  return array(
    'message' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Prepares variables for message templates.
 *
 * Default template: message.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - message: The message object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_message(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';
  $variables['message'] = $variables['elements']['#message'];
  /** @var \Drupal\message\MessageInterface $message */
  $message = $variables['message'];
  $variables['date'] = drupal_render($variables['elements']['created']);
  unset($variables['elements']['created']);
  $variables['author_name'] = drupal_render($variables['elements']['uid']);
  unset($variables['elements']['uid']);

  $variables['url'] = $message->url('canonical', array(
    'language' => $message->language(),
  ));
  $variables['label'] = $variables['elements']['title'];
  unset($variables['elements']['title']);
  // The 'page' variable is set to TRUE in two occasions:
  //   - The view mode is 'full' and we are on the 'message.view' route.
  //   - The message is in preview and view mode is either 'full' or 'default'.
  $variables['page'] = ($variables['view_mode'] == 'full' || $variables['view_mode'] == 'default');

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function message_theme_suggestions_message(array $variables) {
  $suggestions = array();
  /** @var \Drupal\message\MessageInterface $message */
  $message = $variables['elements']['#message'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'message__' . $sanitized_view_mode;
  $suggestions[] = 'message__' . $message->bundle();
  $suggestions[] = 'message__' . $message->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'message__' . $message->id();
  $suggestions[] = 'message__' . $message->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}